/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  ClusterFilter,
  Context,
  Program,
  PublicKey,
} from "@metaplex-foundation/umi";
import {
  getLibreplexFairLaunchErrorFromCode,
  getLibreplexFairLaunchErrorFromName,
} from "../errors/libreplexFairLaunch";

export const LIBREPLEX_FAIR_LAUNCH_PROGRAM_ID =
  "8bvPnYE5Pvz2Z9dE6RAqWr1rzLknTndZ9hwvRE6kPDXP" as PublicKey<"8bvPnYE5Pvz2Z9dE6RAqWr1rzLknTndZ9hwvRE6kPDXP">;

export function createLibreplexFairLaunchProgram(): Program {
  return {
    name: "libreplexFairLaunch",
    publicKey: LIBREPLEX_FAIR_LAUNCH_PROGRAM_ID,
    getErrorFromCode(code: number, cause?: Error) {
      return getLibreplexFairLaunchErrorFromCode(code, this, cause);
    },
    getErrorFromName(name: string, cause?: Error) {
      return getLibreplexFairLaunchErrorFromName(name, this, cause);
    },
    isOnCluster() {
      return true;
    },
  };
}

export function getLibreplexFairLaunchProgram<T extends Program = Program>(
  context: Pick<Context, "programs">,
  clusterFilter?: ClusterFilter,
): T {
  return context.programs.get<T>("libreplexFairLaunch", clusterFilter);
}

export function getLibreplexFairLaunchProgramId(
  context: Pick<Context, "programs">,
  clusterFilter?: ClusterFilter,
): PublicKey {
  return context.programs.getPublicKey(
    "libreplexFairLaunch",
    LIBREPLEX_FAIR_LAUNCH_PROGRAM_ID,
    clusterFilter,
  );
}
