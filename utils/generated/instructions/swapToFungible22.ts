/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from "@metaplex-foundation/umi";
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from "@metaplex-foundation/umi/serializers";
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from "../shared";

// Accounts.
export type SwapToFungible22InstructionAccounts = {
  deployment: PublicKey | Pda;
  payer?: Signer;
  signer: Signer;
  fungibleMint: PublicKey | Pda;
  hashlistMarker: PublicKey | Pda;
  /** this always exists so we can specify the account type explicitly */
  fungibleSourceTokenAccount: PublicKey | Pda;
  fungibleTargetTokenAccount: PublicKey | Pda;
  fungibleTargetTokenAccountOwner: PublicKey | Pda;
  nonFungibleMint: PublicKey | Pda;
  nonFungibleSourceAccountOwner: Signer;
  /**
   * this always exists (otherwise we couldn't swap), so we can specify the account
   * type explicitly
   */

  nonFungibleSourceTokenAccount: PublicKey | Pda;
  nonFungibleTargetTokenAccount: PublicKey | Pda;
  tokenProgram22?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  sysvarInstructions?: PublicKey | Pda;
};

// Data.
export type SwapToFungible22InstructionData = { discriminator: Array<number> };

export type SwapToFungible22InstructionDataArgs = {};

export function getSwapToFungible22InstructionDataSerializer(): Serializer<
  SwapToFungible22InstructionDataArgs,
  SwapToFungible22InstructionData
> {
  return mapSerializer<
    SwapToFungible22InstructionDataArgs,
    any,
    SwapToFungible22InstructionData
  >(
    struct<SwapToFungible22InstructionData>(
      [["discriminator", array(u8(), { size: 8 })]],
      { description: "SwapToFungible22InstructionData" },
    ),
    (value) => ({
      ...value,
      discriminator: [173, 67, 166, 82, 47, 116, 79, 10],
    }),
  ) as Serializer<
    SwapToFungible22InstructionDataArgs,
    SwapToFungible22InstructionData
  >;
}

// Instruction.
export function swapToFungible22(
  context: Pick<Context, "payer" | "programs">,
  input: SwapToFungible22InstructionAccounts,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "libreplexFairLaunch",
    "8bvPnYE5Pvz2Z9dE6RAqWr1rzLknTndZ9hwvRE6kPDXP",
  );

  // Accounts.
  const resolvedAccounts = {
    deployment: {
      index: 0,
      isWritable: true as boolean,
      value: input.deployment ?? null,
    },
    payer: {
      index: 1,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    signer: {
      index: 2,
      isWritable: false as boolean,
      value: input.signer ?? null,
    },
    fungibleMint: {
      index: 3,
      isWritable: true as boolean,
      value: input.fungibleMint ?? null,
    },
    hashlistMarker: {
      index: 4,
      isWritable: false as boolean,
      value: input.hashlistMarker ?? null,
    },
    fungibleSourceTokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.fungibleSourceTokenAccount ?? null,
    },
    fungibleTargetTokenAccount: {
      index: 6,
      isWritable: true as boolean,
      value: input.fungibleTargetTokenAccount ?? null,
    },
    fungibleTargetTokenAccountOwner: {
      index: 7,
      isWritable: false as boolean,
      value: input.fungibleTargetTokenAccountOwner ?? null,
    },
    nonFungibleMint: {
      index: 8,
      isWritable: true as boolean,
      value: input.nonFungibleMint ?? null,
    },
    nonFungibleSourceAccountOwner: {
      index: 9,
      isWritable: false as boolean,
      value: input.nonFungibleSourceAccountOwner ?? null,
    },
    nonFungibleSourceTokenAccount: {
      index: 10,
      isWritable: true as boolean,
      value: input.nonFungibleSourceTokenAccount ?? null,
    },
    nonFungibleTargetTokenAccount: {
      index: 11,
      isWritable: true as boolean,
      value: input.nonFungibleTargetTokenAccount ?? null,
    },
    tokenProgram22: {
      index: 12,
      isWritable: false as boolean,
      value: input.tokenProgram22 ?? null,
    },
    tokenProgram: {
      index: 13,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    systemProgram: {
      index: 15,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    sysvarInstructions: {
      index: 16,
      isWritable: false as boolean,
      value: input.sysvarInstructions ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.tokenProgram22.value) {
    resolvedAccounts.tokenProgram22.value = publicKey(
      "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
    );
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = publicKey(
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    );
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value = publicKey(
      "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
    );
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = publicKey(
      "11111111111111111111111111111111",
    );
  }
  if (!resolvedAccounts.sysvarInstructions.value) {
    resolvedAccounts.sysvarInstructions.value = publicKey(
      "Sysvar1nstructions1111111111111111111111111",
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts,
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    "programId",
    programId,
  );

  // Data.
  const data = getSwapToFungible22InstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
