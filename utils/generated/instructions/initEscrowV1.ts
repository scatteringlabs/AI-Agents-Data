/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { findAssociatedTokenPda } from "@metaplex-foundation/mpl-toolbox";
import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from "@metaplex-foundation/umi";
import {
  Serializer,
  array,
  mapSerializer,
  string,
  struct,
  u16,
  u64,
  u8,
} from "@metaplex-foundation/umi/serializers";
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from "../shared";

// Accounts.
export type InitEscrowV1InstructionAccounts = {
  escrow: PublicKey | Pda;
  authority?: Signer;
  collection: PublicKey | Pda;
  token: PublicKey | Pda;
  feeLocation: PublicKey | Pda;
  /** The ATA for token fees to be stored */
  feeAta?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
};

// Data.
export type InitEscrowV1InstructionData = {
  discriminator: Array<number>;
  name: string;
  uri: string;
  max: bigint;
  min: bigint;
  amount: bigint;
  feeAmount: bigint;
  solFeeAmount: bigint;
  path: number;
};

export type InitEscrowV1InstructionDataArgs = {
  name: string;
  uri: string;
  max: number | bigint;
  min: number | bigint;
  amount: number | bigint;
  feeAmount: number | bigint;
  solFeeAmount: number | bigint;
  path: number;
};

export function getInitEscrowV1InstructionDataSerializer(): Serializer<
  InitEscrowV1InstructionDataArgs,
  InitEscrowV1InstructionData
> {
  return mapSerializer<
    InitEscrowV1InstructionDataArgs,
    any,
    InitEscrowV1InstructionData
  >(
    struct<InitEscrowV1InstructionData>(
      [
        ["discriminator", array(u8(), { size: 8 })],
        ["name", string()],
        ["uri", string()],
        ["max", u64()],
        ["min", u64()],
        ["amount", u64()],
        ["feeAmount", u64()],
        ["solFeeAmount", u64()],
        ["path", u16()],
      ],
      { description: "InitEscrowV1InstructionData" },
    ),
    (value) => ({
      ...value,
      discriminator: [193, 10, 167, 121, 222, 6, 21, 146],
    }),
  ) as Serializer<InitEscrowV1InstructionDataArgs, InitEscrowV1InstructionData>;
}

// Args.
export type InitEscrowV1InstructionArgs = InitEscrowV1InstructionDataArgs;

// Instruction.
export function initEscrowV1(
  context: Pick<Context, "eddsa" | "identity" | "programs">,
  input: InitEscrowV1InstructionAccounts & InitEscrowV1InstructionArgs,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "mplHybrid",
    "9go86qdDhRjgqUc5hFxVDmiMdtPkkogAqi4nWytzaJA1",
  );

  // Accounts.
  const resolvedAccounts = {
    escrow: {
      index: 0,
      isWritable: true as boolean,
      value: input.escrow ?? null,
    },
    authority: {
      index: 1,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    collection: {
      index: 2,
      isWritable: false as boolean,
      value: input.collection ?? null,
    },
    token: {
      index: 3,
      isWritable: false as boolean,
      value: input.token ?? null,
    },
    feeLocation: {
      index: 4,
      isWritable: false as boolean,
      value: input.feeLocation ?? null,
    },
    feeAta: {
      index: 5,
      isWritable: true as boolean,
      value: input.feeAta ?? null,
    },
    systemProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: InitEscrowV1InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.feeAta.value) {
    resolvedAccounts.feeAta.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.token.value),
      owner: expectPublicKey(resolvedAccounts.feeLocation.value),
    });
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      "splSystem",
      "11111111111111111111111111111111",
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      "splToken",
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value = publicKey(
      "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts,
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    "programId",
    programId,
  );

  // Data.
  const data = getInitEscrowV1InstructionDataSerializer().serialize(
    resolvedArgs as InitEscrowV1InstructionDataArgs,
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
