/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from "@metaplex-foundation/umi";

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error,
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** TickerTooLong: Ticker too long */
export class TickerTooLongError extends ProgramError {
  override readonly name: string = "TickerTooLong";

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super("Ticker too long", program, cause);
  }
}
codeToErrorMap.set(0x1770, TickerTooLongError);
nameToErrorMap.set("TickerTooLong", TickerTooLongError);

/** MintTemplateTooLong: Mint template too long */
export class MintTemplateTooLongError extends ProgramError {
  override readonly name: string = "MintTemplateTooLong";

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super("Mint template too long", program, cause);
  }
}
codeToErrorMap.set(0x1771, MintTemplateTooLongError);
nameToErrorMap.set("MintTemplateTooLong", MintTemplateTooLongError);

/** OffchainUrlTooLong: Offchain URL too long */
export class OffchainUrlTooLongError extends ProgramError {
  override readonly name: string = "OffchainUrlTooLong";

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super("Offchain URL too long", program, cause);
  }
}
codeToErrorMap.set(0x1772, OffchainUrlTooLongError);
nameToErrorMap.set("OffchainUrlTooLong", OffchainUrlTooLongError);

/** DeploymentTemplateTooLong: Deployment template too long */
export class DeploymentTemplateTooLongError extends ProgramError {
  override readonly name: string = "DeploymentTemplateTooLong";

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super("Deployment template too long", program, cause);
  }
}
codeToErrorMap.set(0x1773, DeploymentTemplateTooLongError);
nameToErrorMap.set("DeploymentTemplateTooLong", DeploymentTemplateTooLongError);

/** RootTypeTooLong: Root type too long */
export class RootTypeTooLongError extends ProgramError {
  override readonly name: string = "RootTypeTooLong";

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super("Root type too long", program, cause);
  }
}
codeToErrorMap.set(0x1774, RootTypeTooLongError);
nameToErrorMap.set("RootTypeTooLong", RootTypeTooLongError);

/** MintedOut: Minted out */
export class MintedOutError extends ProgramError {
  override readonly name: string = "MintedOut";

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super("Minted out", program, cause);
  }
}
codeToErrorMap.set(0x1775, MintedOutError);
nameToErrorMap.set("MintedOut", MintedOutError);

/** LegacyMigrationsAreMintedOut: Legacy migrations are minted out */
export class LegacyMigrationsAreMintedOutError extends ProgramError {
  override readonly name: string = "LegacyMigrationsAreMintedOut";

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super("Legacy migrations are minted out", program, cause);
  }
}
codeToErrorMap.set(0x1776, LegacyMigrationsAreMintedOutError);
nameToErrorMap.set(
  "LegacyMigrationsAreMintedOut",
  LegacyMigrationsAreMintedOutError,
);

/** MissingGlobalTreeDelegate: Global tree delegate is missing */
export class MissingGlobalTreeDelegateError extends ProgramError {
  override readonly name: string = "MissingGlobalTreeDelegate";

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super("Global tree delegate is missing", program, cause);
  }
}
codeToErrorMap.set(0x1777, MissingGlobalTreeDelegateError);
nameToErrorMap.set("MissingGlobalTreeDelegate", MissingGlobalTreeDelegateError);

/** IncorrectMintType: Incorrect mint type */
export class IncorrectMintTypeError extends ProgramError {
  override readonly name: string = "IncorrectMintType";

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super("Incorrect mint type", program, cause);
  }
}
codeToErrorMap.set(0x1778, IncorrectMintTypeError);
nameToErrorMap.set("IncorrectMintType", IncorrectMintTypeError);

/** InvalidMetadata: Invalid Metadata */
export class InvalidMetadataError extends ProgramError {
  override readonly name: string = "InvalidMetadata";

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super("Invalid Metadata", program, cause);
  }
}
codeToErrorMap.set(0x1779, InvalidMetadataError);
nameToErrorMap.set("InvalidMetadata", InvalidMetadataError);

/** CreatorFeeTooHigh: Creator fee too high */
export class CreatorFeeTooHighError extends ProgramError {
  override readonly name: string = "CreatorFeeTooHigh";

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super("Creator fee too high", program, cause);
  }
}
codeToErrorMap.set(0x177a, CreatorFeeTooHighError);
nameToErrorMap.set("CreatorFeeTooHigh", CreatorFeeTooHighError);

/** MultiplierMissMatch: Custom multiplier mints require co signer */
export class MultiplierMissMatchError extends ProgramError {
  override readonly name: string = "MultiplierMissMatch";

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super("Custom multiplier mints require co signer", program, cause);
  }
}
codeToErrorMap.set(0x177b, MultiplierMissMatchError);
nameToErrorMap.set("MultiplierMissMatch", MultiplierMissMatchError);

/** IncorrectMintCosigner: Incorrect cosigner for mint */
export class IncorrectMintCosignerError extends ProgramError {
  override readonly name: string = "IncorrectMintCosigner";

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super("Incorrect cosigner for mint", program, cause);
  }
}
codeToErrorMap.set(0x177c, IncorrectMintCosignerError);
nameToErrorMap.set("IncorrectMintCosigner", IncorrectMintCosignerError);

/** IncorrectSwapToSplCosigner: Incorrect cosigner for swap to spl */
export class IncorrectSwapToSplCosignerError extends ProgramError {
  override readonly name: string = "IncorrectSwapToSplCosigner";

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super("Incorrect cosigner for swap to spl", program, cause);
  }
}
codeToErrorMap.set(0x177d, IncorrectSwapToSplCosignerError);
nameToErrorMap.set(
  "IncorrectSwapToSplCosigner",
  IncorrectSwapToSplCosignerError,
);

/** IncorrectSwapToNftCosigner: Incorrect cosigner for swap to NFT */
export class IncorrectSwapToNftCosignerError extends ProgramError {
  override readonly name: string = "IncorrectSwapToNftCosigner";

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super("Incorrect cosigner for swap to NFT", program, cause);
  }
}
codeToErrorMap.set(0x177e, IncorrectSwapToNftCosignerError);
nameToErrorMap.set(
  "IncorrectSwapToNftCosigner",
  IncorrectSwapToNftCosignerError,
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getLibreplexFairLaunchErrorFromCode(
  code: number,
  program: Program,
  cause?: Error,
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getLibreplexFairLaunchErrorFromName(
  name: string,
  program: Program,
  cause?: Error,
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
