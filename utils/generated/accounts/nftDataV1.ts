/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
  u64,
  u8,
} from "@metaplex-foundation/umi/serializers";

export type NftDataV1 = Account<NftDataV1AccountData>;

export type NftDataV1AccountData = {
  discriminator: Array<number>;
  authority: PublicKey;
  token: PublicKey;
  feeLocation: PublicKey;
  name: string;
  uri: string;
  max: bigint;
  min: bigint;
  amount: bigint;
  feeAmount: bigint;
  solFeeAmount: bigint;
  count: bigint;
  path: number;
  bump: number;
};

export type NftDataV1AccountDataArgs = {
  authority: PublicKey;
  token: PublicKey;
  feeLocation: PublicKey;
  name: string;
  uri: string;
  max: number | bigint;
  min: number | bigint;
  amount: number | bigint;
  feeAmount: number | bigint;
  solFeeAmount: number | bigint;
  count: number | bigint;
  path: number;
  bump: number;
};

export function getNftDataV1AccountDataSerializer(): Serializer<
  NftDataV1AccountDataArgs,
  NftDataV1AccountData
> {
  return mapSerializer<NftDataV1AccountDataArgs, any, NftDataV1AccountData>(
    struct<NftDataV1AccountData>(
      [
        ["discriminator", array(u8(), { size: 8 })],
        ["authority", publicKeySerializer()],
        ["token", publicKeySerializer()],
        ["feeLocation", publicKeySerializer()],
        ["name", string()],
        ["uri", string()],
        ["max", u64()],
        ["min", u64()],
        ["amount", u64()],
        ["feeAmount", u64()],
        ["solFeeAmount", u64()],
        ["count", u64()],
        ["path", u16()],
        ["bump", u8()],
      ],
      { description: "NftDataV1AccountData" },
    ),
    (value) => ({
      ...value,
      discriminator: [73, 224, 183, 4, 17, 88, 129, 76],
    }),
  ) as Serializer<NftDataV1AccountDataArgs, NftDataV1AccountData>;
}

export function deserializeNftDataV1(rawAccount: RpcAccount): NftDataV1 {
  return deserializeAccount(rawAccount, getNftDataV1AccountDataSerializer());
}

export async function fetchNftDataV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<NftDataV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options,
  );
  assertAccountExists(maybeAccount, "NftDataV1");
  return deserializeNftDataV1(maybeAccount);
}

export async function safeFetchNftDataV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<NftDataV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options,
  );
  return maybeAccount.exists ? deserializeNftDataV1(maybeAccount) : null;
}

export async function fetchAllNftDataV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<NftDataV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "NftDataV1");
    return deserializeNftDataV1(maybeAccount);
  });
}

export async function safeFetchAllNftDataV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<NftDataV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeNftDataV1(maybeAccount as RpcAccount));
}

export function getNftDataV1GpaBuilder(
  context: Pick<Context, "rpc" | "programs">,
) {
  const programId = context.programs.getPublicKey(
    "mplHybrid",
    "9go86qdDhRjgqUc5hFxVDmiMdtPkkogAqi4nWytzaJA1",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      authority: PublicKey;
      token: PublicKey;
      feeLocation: PublicKey;
      name: string;
      uri: string;
      max: number | bigint;
      min: number | bigint;
      amount: number | bigint;
      feeAmount: number | bigint;
      solFeeAmount: number | bigint;
      count: number | bigint;
      path: number;
      bump: number;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      authority: [8, publicKeySerializer()],
      token: [40, publicKeySerializer()],
      feeLocation: [72, publicKeySerializer()],
      name: [104, string()],
      uri: [null, string()],
      max: [null, u64()],
      min: [null, u64()],
      amount: [null, u64()],
      feeAmount: [null, u64()],
      solFeeAmount: [null, u64()],
      count: [null, u64()],
      path: [null, u16()],
      bump: [null, u8()],
    })
    .deserializeUsing<NftDataV1>((account) => deserializeNftDataV1(account))
    .whereField("discriminator", [73, 224, 183, 4, 17, 88, 129, 76]);
}
