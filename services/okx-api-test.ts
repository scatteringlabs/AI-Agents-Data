import crypto from "crypto";

// The parameters such as apikey generated by the exchange 交易所生成的参数
const apiKey: string = "";
const secretkey: string = "";
const passphrase: string = "";

// If you need to use a proxy to access the IP and port of the exchange API
// 如果您需要使用代理访问API的IP和端口（本地调试）
// const proxy = {
//   host: '127.0.0.1',
//   port: 61226
// };

// Returns the current ISO time
// 获取当前的ISO时间
const getTime = (): string => {
  return new Date().toISOString();
};

// Signature operation
// 签名操作
const getSign = (str: string): string => {
  return crypto.createHmac("sha256", secretkey).update(str).digest("base64");
};

// Generate header information
// 生成头信息
const getHeaders = (
  url: string,
  method: string,
  data: Record<string, any> = {},
): Record<string, string> => {
  let timestamp: string = getTime();
  let sign: string;

  if (method === "GET") {
    let arr: string[] = [];
    Object.keys(data).forEach((item) => {
      arr.push(`${item}=${data[item]}`);
    });
    sign = getSign(
      `${timestamp}${method}${url}${arr.length ? `?${arr.join("&")}` : ""}`,
    );
  } else {
    sign = getSign(`${timestamp}${method}${url}${JSON.stringify(data)}`);
  }

  return {
    Accept: "application/json",
    "Content-Type": "application/json",
    "OK-ACCESS-KEY": apiKey,
    "OK-ACCESS-SIGN": sign,
    "OK-ACCESS-TIMESTAMP": timestamp,
    "OK-ACCESS-PASSPHRASE": passphrase,
    // This parameter is required for the analog disk
    // 此参数是模拟盘所必需的
    // 'x-simulated-trading': '1',
  };
};

// Request function using fetch
// 使用fetch的请求函数
const request = async (
  url: string,
  method: "GET" | "POST",
  data: Record<string, any> = {},
): Promise<any> => {
  const timestamp: string = getTime();
  const headers = getHeaders(url, method, data);

  let options: RequestInit = {
    method,
    headers: headers,
  };

  if (method === "GET") {
    const params = new URLSearchParams(data).toString();
    url = params ? `${url}?${params}` : url;
  } else {
    options.body = JSON.stringify(data);
  }

  try {
    const response = await fetch(url, options);
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData?.message || "Request failed");
    }
    const responseData = await response.json();
    return responseData;
  } catch (error: any) {
    const msg: string = error.message || "An error occurred";
    return msg;
  }
};

export default request;
